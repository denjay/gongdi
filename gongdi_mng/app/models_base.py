########################################
# create by :cxh-pc
# create time :2018-03-16 11:02:35.332856
########################################
"""
NOTE: This unit is auto generated by the gencode.
Do not edit these code manually.
"""
from app import db
from datetime import datetime,timedelta
import json
from enum import Enum
class Auditing_status(Enum):
    unaudited =1
    audit_passed =2
    audit_failed =3
class Illegal(db.Model):
    """
    违规祖先类
    ---
    不需要新增修改删除
    """
    __tablename__ = 'illegal'
    discriminator = db.Column("type",db.String(50))
    __mapper_args__ = {'polymorphic_on': discriminator}
    # 违规时间
    illegal_time = db.Column(db.DateTime)
    # 整改时间
    rectify_time = db.Column(db.DateTime)
    # 违规明细
    memo = db.Column(db.String(200))
    # 记录员
    recorder = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    # 审核状态. ---. 0：未审核. 1：审核通过. 2：审核未通过
    auditing_status = db.Column(db.Integer)
    rectify_empid = db.Column(db.Integer,db.ForeignKey("employee.id"))
    illegal_typeid = db.Column(db.Integer,db.ForeignKey("illegal_type.id"), nullable= False)
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    rectify_emp = db.relationship("Employee", foreign_keys="Illegal.rectify_empid")
    illegal_type = db.relationship("Illegal_type", foreign_keys="Illegal.illegal_typeid")
    company = db.relationship("Company", foreign_keys="Illegal.companyid")
    illegal_pics = db.relationship("Illegal_pic", back_populates="illegal", foreign_keys="Illegal_pic.illegalid", cascade="all, delete-orphan")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Inspect(db.Model):
    """
    巡检祖先类
    """
    __tablename__ = 'inspect'
    discriminator = db.Column("type",db.String(50))
    __mapper_args__ = {'polymorphic_on': discriminator}
    id = db.Column(db.Integer, primary_key=True)
    #  是否合格 
    is_qualified = db.Column(db.Boolean, default= False)
    # 巡检时间
    insp_date = db.Column(db.Date)
    # 巡检人
    insp_emp = db.Column(db.String(50))
    # 问题描述
    description = db.Column(db.String(50))
    buweiid = db.Column(db.Integer,db.ForeignKey("buwei.id"), nullable= False)
    buwei = db.relationship("Buwei", foreign_keys="Inspect.buweiid")
    inspect_pics = db.relationship("Inspect_pic", back_populates="inspect", foreign_keys="Inspect_pic.inspectid", cascade="all, delete-orphan")
    def to_jsonex(self):
        data = self.to_json()
        data['buwei_name'] = self.buwei.name
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Buwei(db.Model):
    """
    部位
    """
    __tablename__ = 'buwei'
    discriminator = db.Column("type",db.String(50))
    __mapper_args__ = {'polymorphic_on': discriminator}
    # 名称. ---. 单体中叫单体名称，部位中叫部位名称
    name = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(200))
    dantiid = db.Column(db.Integer,db.ForeignKey("buwei.id"))
    danti = db.relationship("Danti", back_populates="buweis", foreign_keys="Buwei.dantiid", remote_side=[id])
    def to_jsonex(self):
        data = self.to_json()
        data['danti_name']=self.danti.name if self.danti else '' 
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Doc(db.Model):
    """
    文档祖先类
    """
    __tablename__ = 'doc'
    discriminator = db.Column("type",db.String(50))
    __mapper_args__ = {'polymorphic_on': discriminator}
    id = db.Column(db.Integer, primary_key=True)
    # 编号
    code = db.Column(db.String(50))
    # 名称
    name = db.Column(db.String(50))
    # 详情
    description = db.Column(db.String(250))
    buweiid = db.Column(db.Integer,db.ForeignKey("buwei.id"), nullable= False)
    buwei = db.relationship("Buwei", foreign_keys="Doc.buweiid")
    doc_files = db.relationship("Doc_file", back_populates="doc", foreign_keys="Doc_file.docid", cascade="all, delete-orphan")
    def to_jsonex(self):
        data = self.to_json()
        data['buwei_name']=self.buwei.name if self.buwei else ''
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Emp_illegal(Illegal):
    """
    员工违规
    """
    __mapper_args__ = {'polymorphic_identity': 'emp_illegal'}
    illegal_empid = db.Column(db.Integer,db.ForeignKey("employee.id"))
    illegal_emp = db.relationship("Employee", foreign_keys="Emp_illegal.illegal_empid")
    def to_jsonex(self):
        # 修改代码后需同步到类图，否则重新产生代码会被覆盖
        data = self.to_json()
        data['rectify_emp_name'] = self.rectify_emp.emp_name if self.rectify_emp else ''
        data['illegal_emp_name'] = self.illegal_emp.emp_name if self.illegal_emp else ''
        data['illegal_type_name'] = self.illegal_type.name if self.illegal_type else ''
        data['comp_name'] = self.company.company_name if self.company else ''
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Subcon_illegal(Illegal):
    """
    分包商违规
    """
    __mapper_args__ = {'polymorphic_identity': 'subcon_illegal'}
    subcontractorid = db.Column(db.Integer,db.ForeignKey("subcontractor.id"))
    subcontractor = db.relationship("Subcontractor", foreign_keys="Subcon_illegal.subcontractorid")
    def to_jsonex(self):
        # 需在类图中增加，否则重新产生代码会被覆盖
        data = self.to_json()
        data['illegal_type_name'] = self.illegal_type.name if self.illegal_type else ''
        data['subcon_com_name'] = self.subcontractor.comp_name if self.subcontractor else ''
        data['rectify_emp_name'] = self.rectify_emp.emp_name if self.rectify_emp else ''
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Illegal_category_base(db.Model):
    """
    违规类别
    ---
    比如：质量违规，安全管理违规
    """
    __tablename__ = 'illegal_category'
    id = db.Column(db.Integer, primary_key=True)
    # 违规类别
    name = db.Column(db.String(50), unique= True, nullable= False)
    illegal_types = db.relationship("Illegal_type", back_populates="illegal_category", foreign_keys="Illegal_type.illegal_categoryid", cascade="all, delete-orphan")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Illegal_type_base(db.Model):
    """
    违规类型
    ---
    没戴安全帽。。。
    """
    __tablename__ = 'illegal_type'
    id = db.Column(db.Integer, primary_key=True)
    # 违规类型
    name = db.Column(db.String(50), unique= True, nullable= False)
    illegal_categoryid = db.Column(db.Integer,db.ForeignKey("illegal_category.id"), nullable= False)
    illegal_category = db.relationship("Illegal_category", back_populates="illegal_types", foreign_keys="Illegal_type.illegal_categoryid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Subcontractor_base(db.Model):
    """
    分包商
    """
    __tablename__ = 'subcontractor'
    id = db.Column(db.Integer, primary_key=True)
    # 公司名称
    comp_name = db.Column(db.String(50))
    # 电话
    tel = db.Column(db.String(50))
    # 负责人
    manager = db.Column(db.String(50))
    # 营业执照
    license = db.Column(db.String(50))
    email = db.Column(db.String(50))
    # 进场日期
    approach_date = db.Column(db.Date)
    # 离场日期
    departure_date = db.Column(db.Date)
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    company = db.relationship("Company", foreign_keys="Subcontractor.companyid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Illegal_pic_base(db.Model):
    """
    图片
    ---
    尺寸不能小于100k
    """
    __tablename__ = 'illegal_pic'
    # 上传的文件名
    file_name = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    pic_size = db.Column(db.Float)
    # 存储的文件名. ---. 记录文件存储的名称，有带存储路径和防止同名覆盖的标志位
    save_file_name = db.Column(db.String(250))
    illegalid = db.Column(db.Integer,db.ForeignKey("illegal.id"), nullable= False)
    illegal = db.relationship("Illegal", back_populates="illegal_pics", foreign_keys="Illegal_pic.illegalid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Employee_base(db.Model):
    """
    Illegal_emp:违规人，为所有员工中的一个
    rectify_emp：整改人，据有登入账号的员工
    """
    __tablename__ = 'employee'
    id = db.Column(db.Integer, primary_key=True)
    # 员工姓名
    emp_name = db.Column(db.String(50))
    login_user = db.Column(db.String(50))
    departid = db.Column(db.Integer,db.ForeignKey("depart.id"), nullable= False)
    depart = db.relationship("Depart", back_populates="employees", foreign_keys="Employee.departid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Company_base(db.Model):
    """
    公司
    ---
    此处为工地
    """
    __tablename__ = 'company'
    id = db.Column(db.Integer, primary_key=True)
    company_name = db.Column(db.String(50))
    gongdi = db.relationship("Gongdi", back_populates = "company",uselist=False, foreign_keys="Gongdi.companyid")
    departs = db.relationship("Depart", back_populates="company", foreign_keys="Depart.companyid", cascade="all, delete-orphan")
    dantis = db.relationship("Danti", back_populates="company", foreign_keys="Danti.companyid", cascade="all, delete-orphan")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Company_auth_base(db.Model):
    __tablename__ = 'company_auth'
    id = db.Column(db.Integer, primary_key=True)
    appuserid = db.Column(db.String(50))
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    company = db.relationship("Company", foreign_keys="Company_auth.companyid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Depart_base(db.Model):
    __tablename__ = 'depart'
    id = db.Column(db.Integer, primary_key=True)
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    employees = db.relationship("Employee", back_populates="depart", foreign_keys="Employee.departid", cascade="all, delete-orphan")
    company = db.relationship("Company", back_populates="departs", foreign_keys="Depart.companyid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Quality_inspect(Inspect):
    """
    质量巡检
    """
    __mapper_args__ = {'polymorphic_identity': 'quality_inspect'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Safety_inspect(Inspect):
    """
    安全巡检
    """
    __mapper_args__ = {'polymorphic_identity': 'safety_inspect'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Produce_inspect(Inspect):
    """
    生产巡检
    """
    __mapper_args__ = {'polymorphic_identity': 'produce_inspect'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Inspect_pic_base(db.Model):
    """
    图片
    ---
    尺寸不能小于100k
    """
    __tablename__ = 'inspect_pic'
    # 上传的文件名
    file_name = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    pic_size = db.Column(db.Float)
    # 存储的文件名. ---. 记录文件存储的名称，有带存储路径和防止同名覆盖的标志位
    save_file_name = db.Column(db.String(250))
    inspectid = db.Column(db.Integer,db.ForeignKey("inspect.id"), nullable= False)
    inspect = db.relationship("Inspect", back_populates="inspect_pics", foreign_keys="Inspect_pic.inspectid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Gongdi_base(db.Model):
    """
    工地信息
    ---
    company等同公司，但公司有其他服务用到，所以扩展一个类来记录工地信息
    """
    __tablename__ = 'gongdi'
    # 工地代码
    code = db.Column(db.String(50))
    # 经度
    lon = db.Column(db.Float)
    # 纬度
    lat = db.Column(db.Float)
    # 开工时间
    starttime = db.Column(db.Date)
    # 竣工时间
    complete_time = db.Column(db.Date)
    # 建设单位
    build_unit = db.Column(db.String(50))
    # 设计单位
    design_unit = db.Column(db.String(50))
    # 监理单位
    monitor_unit = db.Column(db.String(50))
    # 土建施工单位
    construct_unit = db.Column(db.String(50))
    # 描述
    description = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    company = db.relationship("Company", back_populates="gongdi", foreign_keys="Gongdi.companyid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Danti(Buwei):
    """
    单体
    """
    __mapper_args__ = {'polymorphic_identity': 'danti'}
    # 单体建筑类型
    build_type = db.Column(db.String(50))
    # 单体结构类型
    framework_type = db.Column(db.String(50))
    # 单体面积
    dt_area = db.Column(db.String(50))
    # 单体层数
    dt_plies_num = db.Column(db.String(50))
    eaves_height = db.Column(db.String(50))
    # 施工进度
    build_schedule = db.Column(db.String(50))
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"))
    company = db.relationship("Company", back_populates="dantis", foreign_keys="Danti.companyid")
    buweis = db.relationship("Buwei", back_populates="danti", foreign_keys="Buwei.dantiid", cascade="all, delete-orphan")
    def to_jsonex(self):
        data = self.to_json()
        data['comp_name']=self.company.company_name if self.company else ''
        return data
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Doc_file_base(db.Model):
    """
    文档附件
    """
    __tablename__ = 'doc_file'
    # 上传的文件名
    file_name = db.Column(db.String(50))
    id = db.Column(db.Integer, primary_key=True)
    file_size = db.Column(db.Float)
    # 存储的文件名. ---. 记录文件存储的名称，有带存储路径和防止同名覆盖的标志位
    save_file_name = db.Column(db.String(250))
    docid = db.Column(db.Integer,db.ForeignKey("doc.id"), nullable= False)
    doc = db.relationship("Doc", back_populates="doc_files", foreign_keys="Doc_file.docid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Guifang_doc(Doc):
    """
    规范管理
    """
    __mapper_args__ = {'polymorphic_identity': 'guifang_doc'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Tuzhi_doc(Doc):
    """
    图纸管理
    """
    __mapper_args__ = {'polymorphic_identity': 'tuzhi_doc'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Tuji_doc(Doc):
    """
    图集管理
    """
    __mapper_args__ = {'polymorphic_identity': 'tuji_doc'}
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Jiaodi_doc(Doc):
    """
    交底管理
    """
    __mapper_args__ = {'polymorphic_identity': 'jiaodi_doc'}
    # 施工单位
    shigong_danwei = db.Column(db.String(50))
    # 交底人
    jiaodi_ren = db.Column(db.String(50))
    # 被交底人
    bei_jiaodi_ren = db.Column(db.String(50))
    # 交替时间
    jiaodi_time = db.Column(db.DateTime)
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
