########################################
# create by :cxh-pc
# create time :2018-03-15 18:39:24.751687
########################################
"""
NOTE: This unit is auto generated by the gencode.
Do not edit these code manually.
"""
from app import db
from datetime import datetime,timedelta
import json
from enum import Enum
class Employee_base(db.Model):
    """
    员工资料
    ---
    1，员工离职时，需清除login_user
    2,设定login_user时，要保证一个登录用户只能分配给一个员工
    """
    __tablename__ = 'employee'
    id = db.Column(db.Integer, primary_key=True)
    # 工号. ---. 唯一约束由触发器写
    emp_id = db.Column(db.String(50), nullable= False)
    # 姓名
    emp_name = db.Column(db.String(50), nullable= False)
    # 身份证
    id_card = db.Column(db.String(50), unique= True, nullable= False)
    # 入职日期
    hire_date = db.Column(db.Date)
    # 住址
    address = db.Column(db.String(200))
    # 性别. ---. 值：男，女
    sex = db.Column(db.String(50))
    # 婚姻状况. ---. 值：未婚，已婚，离异，丧偶
    marriage = db.Column(db.String(50))
    # 生日
    birth_date = db.Column(db.Date)
    # 试用期
    temp_month = db.Column(db.Integer)
    # 转正日
    join_date = db.Column(db.Date)
    # 合同生效日
    cardbeg_date = db.Column(db.Date)
    # 合同终止日
    cardend_date = db.Column(db.Date)
    # 紧急联络人
    link_man = db.Column(db.String(50))
    # 联络电话
    link_phone = db.Column(db.String(50))
    # 电话
    phone = db.Column(db.String(50))
    # QQ
    qq = db.Column(db.String(50))
    # 电子邮箱
    email = db.Column(db.String(50))
    # 离职日期
    leave_date = db.Column(db.Date)
    # 离职原因
    leave_cause = db.Column(db.String(50))
    # 登录用户. ---. 1，员工离职时，需清除login_user. 2,设定login_user时，要保证一个登录用户只能分配给一个员工
    login_user = db.Column(db.String(50))
    # 员工代码
    code = db.Column(db.String(50))
    nation = db.Column(db.String(50))
    job_title = db.Column(db.String(50))
    departid = db.Column(db.Integer,db.ForeignKey("depart.id"), nullable= False)
    depart = db.relationship("Depart", back_populates="employees", foreign_keys="Employee.departid")
    work_experiences = db.relationship("Work_experience", back_populates="employee", foreign_keys="Work_experience.employeeid", cascade="all, delete-orphan")
    emp_degrees = db.relationship("Emp_degree", back_populates="employee", foreign_keys="Emp_degree.employeeid", cascade="all, delete-orphan")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Company_base(db.Model):
    """
    規則：
    1，考慮到系統將來會有多家公司營運，為不同公司做資料隔離，所以公司資料只能由管理员用戶創建，在創建公司系統用戶時，需指定公司授權給該用戶。
    2，公司可能是集团公司，下面还会有很多子公司
    """
    __tablename__ = 'company'
    # 公司编码
    company_code = db.Column(db.String(50), unique= True, nullable= False)
    # 公司名称
    company_name = db.Column(db.String(50), unique= True, nullable= False)
    # 描述
    remark = db.Column(db.String(200))
    id = db.Column(db.Integer, primary_key=True)
    # 记录创建公司的用户，非系统用户不能删除他人创建的公司
    create_userid = db.Column(db.String(50))
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"))
    company = db.relationship("Company", foreign_keys="Company.companyid", remote_side=[id])
    departs = db.relationship("Depart", back_populates="company", foreign_keys="Depart.companyid", cascade="all, delete-orphan")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Depart_base(db.Model):
    """
    部门资料
    inside_id:内部ID， 不允许修改，自动由上级编码 
    code:  部门编号，可以修改
    depart_name:部门名称
    manager1：负责人1.姓名
    job_id1：负责人1.职位
    manager2：负责人2.姓名
    job_id2：负责人2.职位
    emp_prefix：工号前缀
    plan_num：编制人数
    linktel：联系电话
    remark：备注
    ------动态计算的栏位-----------------------------------------
    TreeLevel:部门层级，根据depart_id的长度自动计算
    up_ID:上级部门ID，删除depart_ID的最后两位既是
    longName:长部门名称  每一级别的depart_name以空格相连既是
    规则：
    1，系统通过内部的ID表示部门结构图，最上级ID号是1位，下级ID号为3位，再下级ID为5位，每增加一个下级就增加2位，每一级最多99个部门。
     ID长度=级数×2-1
    2，资料库中要初始化一笔 depart_id与inside_id为0的资料，所有的下级部门均由它发展而来(depart_ID为1位的只能有一笔)
    3，新增资料的depart_id为同级别中最大id的最后2位数字上加1既是。
    select depart_id from departs where len(depart_id)=3 and  depart_id like '0%' order by depart_id
    """
    __tablename__ = 'depart'
    db.UniqueConstraint('company_id','code', name='unique_depart_company_id_code')
    id = db.Column(db.Integer, primary_key=True)
    # 公司代码
    code = db.Column(db.String(50), nullable= False)
    # 内部ID， 不允许修改，自动由上级编码 
    inside_id = db.Column(db.String(50), nullable= False)
    # 公司名称
    depart_name = db.Column(db.String(50), nullable= False)
    # 联系人
    linkman = db.Column(db.String(50))
    # 联系电话
    linktel = db.Column(db.String(50))
    # 备注
    remark = db.Column(db.String(200))
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    employees = db.relationship("Employee", back_populates="depart", foreign_keys="Employee.departid", cascade="all, delete-orphan")
    company = db.relationship("Company", back_populates="departs", foreign_keys="Depart.companyid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Work_experience_base(db.Model):
    """
    工作经历
    work_unit：服务单位、
    work_begin：
    work_end：起迄日期
    work_title：职称
    work_context：工作内容
    """
    __tablename__ = 'work_experience'
    # 服务单位
    work_unit = db.Column(db.String(50), nullable= False)
    # 起始日期
    work_begin = db.Column(db.Date, nullable= False)
    # 终止日期
    work_end = db.Column(db.Date, nullable= False)
    # 职称
    work_title = db.Column(db.String(50))
    # 备注
    remark = db.Column(db.String(200))
    # 工作内容
    work_context = db.Column(db.String(200))
    id = db.Column(db.Integer, primary_key=True)
    employeeid = db.Column(db.Integer,db.ForeignKey("employee.id"), nullable= False)
    employee = db.relationship("Employee", back_populates="work_experiences", foreign_keys="Work_experience.employeeid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Emp_degree_base(db.Model):
    """
    学习经历
    school_name：学校
    department：科系
    study_begin:
    study_end：起迄年限、
    degree_type：毕/肄业、
    Certificate_photo:毕业证书附本
    """
    __tablename__ = 'emp_degree'
    id = db.Column(db.Integer, primary_key=True)
    # 学校名称
    school_name = db.Column(db.String(50), nullable= False)
    # 科系
    department = db.Column(db.String(50), nullable= False)
    # 开始日期
    study_begin = db.Column(db.Date, nullable= False)
    # 结束日期
    study_end = db.Column(db.Date, nullable= False)
    # 毕/肄业
    degree_type = db.Column(db.String(50), nullable= False)
    # 备注
    remark = db.Column(db.String(50))
    # 学历名称
    degree_name = db.Column(db.String(50), nullable= False)
    employeeid = db.Column(db.Integer,db.ForeignKey("employee.id"), nullable= False)
    employee = db.relationship("Employee", back_populates="emp_degrees", foreign_keys="Emp_degree.employeeid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Company_auth_base(db.Model):
    """
    记录用户的授权公司
    ---
    1，员工只能处理他授权公司的资料，一个员工可授权多个公司
    2，如果只要看到本公司的资料，则无需授权
    """
    __tablename__ = 'company_auth'
    id = db.Column(db.Integer, primary_key=True)
    companyid = db.Column(db.Integer,db.ForeignKey("company.id"), nullable= False)
    appuserid = db.Column(db.String(50),db.ForeignKey("appuser.id"), nullable= False)
    company = db.relationship("Company", foreign_keys="Company_auth.companyid")
    appuser = db.relationship("Appuser", foreign_keys="Company_auth.appuserid")
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
class Appuser_base(db.Model):
    __tablename__ = 'appuser'
    id = db.Column(db.String(50), primary_key=True)
    name = db.Column(db.String(50))
    manageuserid = db.Column(db.String(50))
    ismanage = db.Column(db.Boolean)
    def __repr__(self):
        return json.dumps(self.to_json())
    def to_json(self):
        return {key: getattr(self, key) for key in self.__table__.columns.keys()
                   if hasattr(self,key)
               }
